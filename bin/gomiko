#! /usr/bin/env ruby

require 'thor'
require 'gomiko'
require 'pp'

class MyCommand < Thor
  #def initialize
  #  @gomiko = Gomiko.new
  #end

  desc :rm, 'Throw files into trash directory'
  #option :dry_run,
  #  desc: "Dry run, not extcute.",
  #  type: :boolean,
  #  default: false
  def rm(* paths)
    Gomiko.new.throw(paths: paths)
  end

  desc :empty, 'Remove files in trash directory'
  option "mtime",
    type: :string,
    desc: 'Data was last modified n*24 hours ago.',
    default: '0'
  option "quiet", type: :boolean,
    default: false
  def empty(* ids)
    Gomiko.new.empty(ids: ids,
                     mtime: options[:mtime].to_i,
                     verbose: ! options[:quiet])
  end

  desc :undo, 'Undo removed files from trash directory'
  def undo(* dirs)
    g = Gomiko.new

    if g.dir_list.empty?
      puts "Nothing to undo in #{g.trashdir}"
      exit
    end

    dirs = [g.dir_list[-1]] if dirs.empty?
    dirs.each do |dir|
      begin
        g.undo(dir)
      rescue Errno::EACCES
        puts "Permission denined: #{dir}"
      end
    end
  end

  ## list
  desc :ls, 'Show trash directory'
  option "long", type: :boolean,
    desc: "use a long format",
    default: false,
    aliases: 'l'
  option "all", type: :boolean,
    desc: "show all history including after undo",
    default: false,
    aliases: 'a'
  def ls(* ids)
    g = Gomiko.new
    if g.dir_list.empty?
      puts "Nothing in ~/.trash"
      exit
    end
    ids = g.dir_list if ids.empty?
    if options[:long]
      ids.each do |id|
        puts '-' * 60
        results = g.info(id)
        printf("%-10s: %s\n", 'size', results[0])
        printf("%-10s: %s\n", 'id', results[1])
        printf("%-10s: %s\n", 'path(s)', results[2])
        puts '+----- filetype in trash'
        puts '| +--- filetype in original path'
        puts '| | +- original path'
        Tefil::ColumnFormer.new.form( results[3])
        puts
      end
    else
      results = [['size', 'ID', 'original paths[ ...]']]
      #pp ids
      results += ids.map do |id|
        g.info(id)[0..2]
      end
      Tefil::ColumnFormer.new.form(results)
    end
    if options[:all]
      g.yaml_list.each do |file|
        id = file.sub(".yaml", "")
        next if g.dir_list.include?(id)
        puts "undo #{id}"
      end
    end
  end
end

MyCommand.start(ARGV)

